lambda expression: inline method. Method without a class definition. (person1, person2) -> person1.getAge() - person2.getAge()

Comparable interface - осигурява естествено подреждане на елементи вътре в клас. Това подреждане се основава на едно присъщо свойство. За да направи един клас сравним, той трябва да имплементира интерфейса Comparable и да предостави имплементацията за метода compareTo.
!  The compareTo method returns a negative integer, zero, or a positive integer, indicating whether the current object is less than, equal to, or greater than the specified object. !
Comparator interface - Интерфейсът Comparator се използва, когато искате да дефинирате различен начин за сортиране на обекти, които може да нямат естествен ред, или когато искате да предоставите множество критерии за сортиране. За да използвате Comparator, вие създавате отделен клас, който имплементира интерфейса на Comparator, или можете да използвате ламбда израз или метод референция .

Java Collections Framework: The Java Collections Framework provides algorithms such as sorting, searching, and shuffling through the Collections utility class. It promotes code reuse and provides a standardized way to work with collections, making it an integral part of Java programming for handling data structures and algorithms efficiently.

Analyzing Time and Space complexity of an algorithm or a data structure:

Big O Notation:
O(1) - Constant Time:

The running time of the algorithm is constant, regardless of the size of the input.
Example: Accessing an element in an array by index, performing a simple arithmetic operation.
O(log n) - Logarithmic Time:

The running time grows logarithmically with the size of the input.
Common in algorithms that divide the problem into smaller subproblems.
Example: Binary search on a sorted array.
O(n) - Linear Time:

The running time grows linearly with the size of the input.
Example: Iterating through an array or a linked list.
O(n log n) - Linearithmic Time:

Common in efficient sorting algorithms.
Example: Merge sort, heap sort.
O(n^2) - Quadratic Time:

The running time grows proportionally to the square of the size of the input.
Common in algorithms with nested iterations.
Example: Bubble sort, selection sort.
O(n^k) - Polynomial Time:

The running time grows polynomially with the size of the input.
The degree of the polynomial is represented by 'k'.
Example: Algorithms with nested loops where the total number of nested loops is 'k'.
O(2^n) - Exponential Time:

The running time grows exponentially with the size of the input.
Common in brute-force algorithms or recursive algorithms with exponential recursion.
Example: Solving the Tower of Hanoi problem using recursion.

Important Points:
Best Case vs. Worst Case:

Big O notation usually describes the worst-case scenario. However, there are also notations like Omega (Ω) for best-case analysis and Theta (Θ) for average-case analysis.
Asymptotic Analysis:

Big O focuses on the behavior of the algorithm as the input size approaches infinity. It ignores constant factors and lower-order terms.
Comparing Algorithms:

Big O notation allows us to compare the efficiency of algorithms without getting into the details of the specific hardware or constant factors.
